
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000028c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003bc  080003c4  000103c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003bc  080003bc  000103c4  2**0
                  CONTENTS
  4 .ARM          00000000  080003bc  080003bc  000103c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003bc  080003c4  000103c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000d8  00000000  00000000  000103ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000a5  00000000  00000000  000104c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000060  00000000  00000000  00010570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  000105d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000ab9  00000000  00000000  00010618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000012f  00000000  00000000  000110d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002f78  00000000  00000000  00011200  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00014178  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  000141f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003a4 	.word	0x080003a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003a4 	.word	0x080003a4

08000170 <clock_init>:
#define GPIOB_CRH		*((volatile unsigned int *)(GPIOB_BASE + 0x04))
#define GPIOB_CRL		*((volatile unsigned int *)(GPIOB_BASE + 0x00))
#define GPIOB_ODR		*((volatile unsigned int *)(GPIOB_BASE + 0x0C))
#define GPIOB_IDR		*((volatile unsigned int *)(GPIOB_BASE + 0x08))

void clock_init(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// Clock Enable for PortA
	RCC_APB2ENR |= 1 << 2;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	// Clock Enable for PortB
	RCC_APB2ENR |= 1 << 3;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <GPIO_init>:
void GPIO_init(void) {
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
//	PA1 and PA13 are configured as floating input pins
	// PA1
	GPIOA_CRL &= ~(1 << 4);
 800019c:	4b31      	ldr	r3, [pc, #196]	; (8000264 <GPIO_init+0xcc>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a30      	ldr	r2, [pc, #192]	; (8000264 <GPIO_init+0xcc>)
 80001a2:	f023 0310 	bic.w	r3, r3, #16
 80001a6:	6013      	str	r3, [r2, #0]
	GPIOA_CRL &= ~(1 << 5);
 80001a8:	4b2e      	ldr	r3, [pc, #184]	; (8000264 <GPIO_init+0xcc>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a2d      	ldr	r2, [pc, #180]	; (8000264 <GPIO_init+0xcc>)
 80001ae:	f023 0320 	bic.w	r3, r3, #32
 80001b2:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (1 << 6);
 80001b4:	4b2b      	ldr	r3, [pc, #172]	; (8000264 <GPIO_init+0xcc>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a2a      	ldr	r2, [pc, #168]	; (8000264 <GPIO_init+0xcc>)
 80001ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001be:	6013      	str	r3, [r2, #0]
	GPIOA_CRL &= ~(1 << 7);
 80001c0:	4b28      	ldr	r3, [pc, #160]	; (8000264 <GPIO_init+0xcc>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a27      	ldr	r2, [pc, #156]	; (8000264 <GPIO_init+0xcc>)
 80001c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80001ca:	6013      	str	r3, [r2, #0]

	// PA13
	GPIOA_CRH &= ~(1 << 20);
 80001cc:	4b26      	ldr	r3, [pc, #152]	; (8000268 <GPIO_init+0xd0>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a25      	ldr	r2, [pc, #148]	; (8000268 <GPIO_init+0xd0>)
 80001d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80001d6:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= ~(1 << 21);
 80001d8:	4b23      	ldr	r3, [pc, #140]	; (8000268 <GPIO_init+0xd0>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a22      	ldr	r2, [pc, #136]	; (8000268 <GPIO_init+0xd0>)
 80001de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= (1 << 22);
 80001e4:	4b20      	ldr	r3, [pc, #128]	; (8000268 <GPIO_init+0xd0>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a1f      	ldr	r2, [pc, #124]	; (8000268 <GPIO_init+0xd0>)
 80001ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= ~(1 << 23);
 80001f0:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <GPIO_init+0xd0>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a1c      	ldr	r2, [pc, #112]	; (8000268 <GPIO_init+0xd0>)
 80001f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80001fa:	6013      	str	r3, [r2, #0]

//	PB1 and PB13 are configured as output pins
	// PB1
	GPIOB_CRL |= (1 << 4);
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <GPIO_init+0xd4>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a1a      	ldr	r2, [pc, #104]	; (800026c <GPIO_init+0xd4>)
 8000202:	f043 0310 	orr.w	r3, r3, #16
 8000206:	6013      	str	r3, [r2, #0]
	GPIOB_CRL &= ~(1 << 5);
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <GPIO_init+0xd4>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a17      	ldr	r2, [pc, #92]	; (800026c <GPIO_init+0xd4>)
 800020e:	f023 0320 	bic.w	r3, r3, #32
 8000212:	6013      	str	r3, [r2, #0]
	GPIOB_CRL &= ~(1 << 6);
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <GPIO_init+0xd4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a14      	ldr	r2, [pc, #80]	; (800026c <GPIO_init+0xd4>)
 800021a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800021e:	6013      	str	r3, [r2, #0]
	GPIOB_CRL &= ~(1 << 7);
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <GPIO_init+0xd4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <GPIO_init+0xd4>)
 8000226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800022a:	6013      	str	r3, [r2, #0]

	// PB13
	GPIOB_CRH |= (1 << 20);
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <GPIO_init+0xd8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <GPIO_init+0xd8>)
 8000232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000236:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(1 << 21);
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <GPIO_init+0xd8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0c      	ldr	r2, [pc, #48]	; (8000270 <GPIO_init+0xd8>)
 800023e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000242:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(1 << 22);
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <GPIO_init+0xd8>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a09      	ldr	r2, [pc, #36]	; (8000270 <GPIO_init+0xd8>)
 800024a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800024e:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(1 << 23);
 8000250:	4b07      	ldr	r3, [pc, #28]	; (8000270 <GPIO_init+0xd8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a06      	ldr	r2, [pc, #24]	; (8000270 <GPIO_init+0xd8>)
 8000256:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800025a:	6013      	str	r3, [r2, #0]

}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40010800 	.word	0x40010800
 8000268:	40010804 	.word	0x40010804
 800026c:	40010c00 	.word	0x40010c00
 8000270:	40010c04 	.word	0x40010c04

08000274 <my_delay>:
void my_delay(int x) {
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < x; i++) {
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	e00b      	b.n	800029a <my_delay+0x26>
		for (int j = 0; j < 256; j++)
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
 8000286:	e002      	b.n	800028e <my_delay+0x1a>
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	3301      	adds	r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	2bff      	cmp	r3, #255	; 0xff
 8000292:	ddf9      	ble.n	8000288 <my_delay+0x14>
	for (int i = 0; i < x; i++) {
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	3301      	adds	r3, #1
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	68fa      	ldr	r2, [r7, #12]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	429a      	cmp	r2, r3
 80002a0:	dbef      	blt.n	8000282 <my_delay+0xe>
			;
	}
}
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <main>:

int main() {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	clock_init();
 80002b0:	f7ff ff5e 	bl	8000170 <clock_init>
	GPIO_init();
 80002b4:	f7ff ff70 	bl	8000198 <GPIO_init>

	while (1) {
		if (((GPIOA_IDR & (1 << 1)) >> 1) == 0) {
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <main+0x54>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 0302 	and.w	r3, r3, #2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d10c      	bne.n	80002de <main+0x32>
			GPIOB_ODR ^= 1 << 1;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <main+0x58>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <main+0x58>)
 80002ca:	f083 0302 	eor.w	r3, r3, #2
 80002ce:	6013      	str	r3, [r2, #0]
			while (((GPIOA_IDR & (1 << 1)) >> 1) == 0)
 80002d0:	bf00      	nop
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <main+0x54>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f003 0302 	and.w	r3, r3, #2
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0f9      	beq.n	80002d2 <main+0x26>
				;
		}
		if (((GPIOA_IDR & (1 << 13)) >> 13) == 1) {
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <main+0x54>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	0b5b      	lsrs	r3, r3, #13
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d1e5      	bne.n	80002b8 <main+0xc>
			GPIOB_ODR ^= 1 << 13;
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <main+0x58>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <main+0x58>)
 80002f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002f6:	6013      	str	r3, [r2, #0]
			my_delay(100);
 80002f8:	2064      	movs	r0, #100	; 0x64
 80002fa:	f7ff ffbb 	bl	8000274 <my_delay>
		if (((GPIOA_IDR & (1 << 1)) >> 1) == 0) {
 80002fe:	e7db      	b.n	80002b8 <main+0xc>
 8000300:	40010808 	.word	0x40010808
 8000304:	40010c0c 	.word	0x40010c0c

08000308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000308:	480d      	ldr	r0, [pc, #52]	; (8000340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800030c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <LoopForever+0x6>)
  ldr r1, =_edata
 8000312:	490d      	ldr	r1, [pc, #52]	; (8000348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <LoopForever+0xe>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000328:	4c0a      	ldr	r4, [pc, #40]	; (8000354 <LoopForever+0x16>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000336:	f000 f811 	bl	800035c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033a:	f7ff ffb7 	bl	80002ac <main>

0800033e <LoopForever>:

LoopForever:
    b LoopForever
 800033e:	e7fe      	b.n	800033e <LoopForever>
  ldr   r0, =_estack
 8000340:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000348:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800034c:	080003c4 	.word	0x080003c4
  ldr r2, =_sbss
 8000350:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000354:	2000001c 	.word	0x2000001c

08000358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000358:	e7fe      	b.n	8000358 <ADC1_2_IRQHandler>
	...

0800035c <__libc_init_array>:
 800035c:	b570      	push	{r4, r5, r6, lr}
 800035e:	2500      	movs	r5, #0
 8000360:	4e0c      	ldr	r6, [pc, #48]	; (8000394 <__libc_init_array+0x38>)
 8000362:	4c0d      	ldr	r4, [pc, #52]	; (8000398 <__libc_init_array+0x3c>)
 8000364:	1ba4      	subs	r4, r4, r6
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	42a5      	cmp	r5, r4
 800036a:	d109      	bne.n	8000380 <__libc_init_array+0x24>
 800036c:	f000 f81a 	bl	80003a4 <_init>
 8000370:	2500      	movs	r5, #0
 8000372:	4e0a      	ldr	r6, [pc, #40]	; (800039c <__libc_init_array+0x40>)
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <__libc_init_array+0x44>)
 8000376:	1ba4      	subs	r4, r4, r6
 8000378:	10a4      	asrs	r4, r4, #2
 800037a:	42a5      	cmp	r5, r4
 800037c:	d105      	bne.n	800038a <__libc_init_array+0x2e>
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000384:	4798      	blx	r3
 8000386:	3501      	adds	r5, #1
 8000388:	e7ee      	b.n	8000368 <__libc_init_array+0xc>
 800038a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800038e:	4798      	blx	r3
 8000390:	3501      	adds	r5, #1
 8000392:	e7f2      	b.n	800037a <__libc_init_array+0x1e>
 8000394:	080003bc 	.word	0x080003bc
 8000398:	080003bc 	.word	0x080003bc
 800039c:	080003bc 	.word	0x080003bc
 80003a0:	080003c0 	.word	0x080003c0

080003a4 <_init>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr

080003b0 <_fini>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

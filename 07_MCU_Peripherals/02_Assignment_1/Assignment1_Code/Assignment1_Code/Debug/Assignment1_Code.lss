
Assignment1_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000128  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000349  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e7  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000214  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000a8  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000038  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  8a:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Setup>:
#include "ATmega32.h"
//#include <avr/io.h>
#define F_CPU 1000000UL

void Setup(void){
	DDRD |= (1<<4) | (1<<5) | (1<<6) | (1<<7) ;
  92:	81 b3       	in	r24, 0x11	; 17
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	81 bb       	out	0x11, r24	; 17
}
  98:	08 95       	ret

0000009a <my_delay>:
void my_delay(int x){
	int i, j ;
	for(i=0; i<x; i++){
  9a:	18 16       	cp	r1, r24
  9c:	19 06       	cpc	r1, r25
  9e:	0c f4       	brge	.+2      	; 0xa2 <my_delay+0x8>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <my_delay+0x6>
  a2:	08 95       	ret

000000a4 <main>:
		for(j=0; j<100000; j++);
	}
}

int main(void){
	Setup();
  a4:	0e 94 49 00 	call	0x92	; 0x92 <Setup>
	int i, x ;
	x = 100000 ;
 
	
    while(1){
		for(i=0; i<4; i++){
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	d0 e0       	ldi	r29, 0x00	; 0
  ac:	00 e0       	ldi	r16, 0x00	; 0
  ae:	10 e0       	ldi	r17, 0x00	; 0
  b0:	34 c0       	rjmp	.+104    	; 0x11a <main+0x76>
			switch(i){
  b2:	c1 30       	cpi	r28, 0x01	; 1
  b4:	d1 05       	cpc	r29, r1
  b6:	b1 f0       	breq	.+44     	; 0xe4 <main+0x40>
  b8:	c2 30       	cpi	r28, 0x02	; 2
  ba:	d1 05       	cpc	r29, r1
  bc:	1c f4       	brge	.+6      	; 0xc4 <main+0x20>
  be:	20 97       	sbiw	r28, 0x00	; 0
  c0:	41 f0       	breq	.+16     	; 0xd2 <main+0x2e>
  c2:	2a c0       	rjmp	.+84     	; 0x118 <main+0x74>
  c4:	c2 30       	cpi	r28, 0x02	; 2
  c6:	d1 05       	cpc	r29, r1
  c8:	b1 f0       	breq	.+44     	; 0xf6 <main+0x52>
  ca:	c3 30       	cpi	r28, 0x03	; 3
  cc:	d1 05       	cpc	r29, r1
  ce:	21 f5       	brne	.+72     	; 0x118 <main+0x74>
  d0:	1b c0       	rjmp	.+54     	; 0x108 <main+0x64>
				case 0:
					PORTD |= (1<<4) ;
  d2:	94 9a       	sbi	0x12, 4	; 18
					PORTD &= ~(1<<5);
  d4:	95 98       	cbi	0x12, 5	; 18
					PORTD &= ~(1<<6);
  d6:	96 98       	cbi	0x12, 6	; 18
					PORTD &= ~(1<<7);
  d8:	97 98       	cbi	0x12, 7	; 18
					my_delay(x);
  da:	80 ea       	ldi	r24, 0xA0	; 160
  dc:	96 e8       	ldi	r25, 0x86	; 134
  de:	0e 94 4d 00 	call	0x9a	; 0x9a <my_delay>
				break;
  e2:	1a c0       	rjmp	.+52     	; 0x118 <main+0x74>
				case 1:
					PORTD &= ~(1<<4) ;
  e4:	94 98       	cbi	0x12, 4	; 18
					PORTD |= (1<<5);
  e6:	95 9a       	sbi	0x12, 5	; 18
					PORTD &= ~(1<<6);
  e8:	96 98       	cbi	0x12, 6	; 18
					PORTD &= ~(1<<7);
  ea:	97 98       	cbi	0x12, 7	; 18
					my_delay(x);
  ec:	80 ea       	ldi	r24, 0xA0	; 160
  ee:	96 e8       	ldi	r25, 0x86	; 134
  f0:	0e 94 4d 00 	call	0x9a	; 0x9a <my_delay>
				break;
  f4:	11 c0       	rjmp	.+34     	; 0x118 <main+0x74>
				case 2:
					PORTD &= ~(1<<4);
  f6:	94 98       	cbi	0x12, 4	; 18
					PORTD &= ~(1<<5);
  f8:	95 98       	cbi	0x12, 5	; 18
					PORTD |= (1<<6);
  fa:	96 9a       	sbi	0x12, 6	; 18
					PORTD &= ~(1<<7);
  fc:	97 98       	cbi	0x12, 7	; 18
					my_delay(x);
  fe:	80 ea       	ldi	r24, 0xA0	; 160
 100:	96 e8       	ldi	r25, 0x86	; 134
 102:	0e 94 4d 00 	call	0x9a	; 0x9a <my_delay>
				break;
 106:	08 c0       	rjmp	.+16     	; 0x118 <main+0x74>
				case 3:
					PORTD &= ~(1<<4);
 108:	94 98       	cbi	0x12, 4	; 18
					PORTD &= ~(1<<5);
 10a:	95 98       	cbi	0x12, 5	; 18
					PORTD &= ~(1<<6);
 10c:	96 98       	cbi	0x12, 6	; 18
					PORTD |= (1<<7);
 10e:	97 9a       	sbi	0x12, 7	; 18
					my_delay(x);
 110:	80 ea       	ldi	r24, 0xA0	; 160
 112:	96 e8       	ldi	r25, 0x86	; 134
 114:	0e 94 4d 00 	call	0x9a	; 0x9a <my_delay>
	int i, x ;
	x = 100000 ;
 
	
    while(1){
		for(i=0; i<4; i++){
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	c4 30       	cpi	r28, 0x04	; 4
 11c:	d1 05       	cpc	r29, r1
 11e:	4c f2       	brlt	.-110    	; 0xb2 <main+0xe>
 120:	e8 01       	movw	r28, r16
 122:	d7 cf       	rjmp	.-82     	; 0xd2 <main+0x2e>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>

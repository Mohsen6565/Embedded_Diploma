/*
 * STM32_F103C6_GPIO.c
 *
 *  Created on: Nov 7, 2022
 *      Author: Mohamed
 */
#include <stdint.h>
#include <stdlib.h>
#include "STM32_F103C6.h"
#include "STM32_F103C6_GPIO.h"

/**================================================================
* 	@Fn				- MCAL_GPIO_init
* 	@brief 			- Initializes GPIOx PINy according to some configurations
* 	@param [in] 	[1] Name: GPIOx
* 						Type: GPIO_Typedef_t*
* 						where x can be (A..E depending on device) to select GPIO Port
* 						*** This Value must be set according to the values @ref GPIO ***
* 					[2] Name: piny
* 						Type: GPIO_pin_config_t*
* 						where y can be (0..15 depending on device) to select specific pin
* 						*** This Value must be set according to the values @ref GPIO_PIN_define ***
* 	@param [out] 	- None
*	@retval			- None
* 	Note			- None
*/
void MCAL_GPIO_init(GPIO_Typedef_t* GPIOx, GPIO_pin_config_t* piny){
	volatile uint32_t* config_reg = NULL ;
	uint8_t pin_mode ;
	uint8_t pin_offset ;
//	[1]	Check Pin Number to select CRL or CRH
	config_reg = (piny->GPIO_pin_number > GPIO_PIN_7) ? (&GPIOx->CRH) : (&GPIOx->CRL);
	pin_offset = (piny->GPIO_pin_number % 8) * 4 ;
//	[2] Check The Pin Mode
	if( (piny->GPIO_pin_mode == GPIO_MODE_INPUT_ANALOG) ||
		(piny->GPIO_pin_mode == GPIO_MODE_INPUT_FLOATING) ||
		(piny->GPIO_pin_mode == GPIO_MODE_INPUT_PU) ||
		(piny->GPIO_pin_mode == GPIO_MODE_INPUT_PD) ||
		(piny->GPIO_pin_mode == GPIO_MODE_AF_IN) )
	{
		// If The Pin Mode is Input
		// (1) Setting pin mode according to the data sheet for each input mode to fill bits of (CNFy[1:0]_MODEy[1:0])
		pin_mode = 	(piny->GPIO_pin_mode == GPIO_MODE_INPUT_ANALOG) ? (0x0) :
					(piny->GPIO_pin_mode == GPIO_MODE_INPUT_FLOATING || piny->GPIO_pin_mode == GPIO_MODE_AF_IN) ? (0x4) :
					(piny->GPIO_pin_mode == GPIO_MODE_INPUT_PU || piny->GPIO_pin_mode == GPIO_MODE_INPUT_PD) ? (0x8) : (0x0);
		// (2) If the input mode is pull up or pull down we need further step of modifying corresponding place in ODR Register
		switch(pin_mode == GPIO_MODE_INPUT_PU){
			case 1:
				SET_BIT(GPIOx->ODR, piny->GPIO_pin_number);
				break;

			default:
				CLEAR_BIT(GPIOx->ODR, piny->GPIO_pin_number);
		}
	}else{
		// If The Pin Mode is Output
		pin_mode = ((piny->GPIO_pin_mode - 4)<<2) | (piny->GPIO_output_speed + 1) ;
	}
// [3] Getting the offset with which we will shift the pin mode value to configure the right pin
	(*config_reg) = (pin_mode<<pin_offset);

}

/**================================================================
* @Fn			- MCAL_GPIO_Reset
* @brief 		- Resetting The specified GPIO Port
* @param [in]	- [1] Name: GPIOx
* 					  Type: GPIO_Typedef_t*
* 					  where x can be (A..E depending on device) to select GPIO Port
* 					  *** This Value must be set according to the values @ref GPIO ***
* @param [out] 	- None
* @retval 		- None
* Note			- None
*/
void MCAL_GPIO_Reset(GPIO_Typedef_t* GPIOx){
	if(GPIOx == GPIOA){
		SET_BIT(RCC->APB2RSTR, 2);
		CLEAR_BIT(RCC->APB2RSTR, 2);
	}else if(GPIOx == GPIOB){
		SET_BIT(RCC->APB2RSTR, 3);
		CLEAR_BIT(RCC->APB2RSTR, 3);
	}else if(GPIOx == GPIOC){
		SET_BIT(RCC->APB2RSTR, 4);
		CLEAR_BIT(RCC->APB2RSTR, 4);
	}else if(GPIOx == GPIOD){
		SET_BIT(RCC->APB2RSTR, 5);
		CLEAR_BIT(RCC->APB2RSTR, 5);
	}else if(GPIOx == GPIOE){
		SET_BIT(RCC->APB2RSTR, 6);
		CLEAR_BIT(RCC->APB2RSTR, 7);
	}
}

/**================================================================
* @Fn			- MCAL_GPIO_ReadPin
* @brief 		- Reading The value of some input pin
* @param [in] 		[1] Name: GPIOx
* 						Type: GPIO_Typedef_t*
* 						where x can be (A..E depending on device) to select GPIO Port
* 						*** This Value must be set according to the values @ref GPIO ***
* 					[2] Name: pin_number
* 						Type: uint8_t
* 						where pin_number can be (0..15 depending on device) to select specific pin
* @param [out] 	- None
* @retval 		- Input Pin Value
* 				  *** This Value must be set according to the values @ref GPIO_PIN_state ***
* Note			- None
*/
uint8_t MCAL_GPIO_ReadPin(GPIO_Typedef_t* GPIOx, uint8_t pin_number){
	uint8_t pin_status = GPIO_PIN_RESET ;
	pin_status = (READ_BIT(GPIOx->IDR, pin_number)) ? (GPIO_PIN_SET) : (GPIO_PIN_RESET)  ;

	return pin_status ;
}

/**================================================================
* @Fn			- MCAL_GPIO_ReadPort
* @brief 		- Reading The value of some input pin
* @param [in] 	-	[1] Name: GPIOx
* 						Type: GPIO_Typedef_t*
* 						where x can be (A..E depending on device) to select GPIO Port
* 						*** This Value must be set according to the values @ref GPIO ***
* @param [out] 	- None
* @retval 		- Input Port Value
* Note			- None
*/
uint16_t MCAL_GPIO_ReadPort(GPIO_Typedef_t* GPIOx){
	uint16_t port_value = 0 ;
	port_value = (uint16_t)GPIOx->IDR ;

	return port_value ;
}

/**================================================================
* @Fn			- MCAL_GPIO_WritePin
* @brief 		- Writing Value to Pin y in GPIO Port x
* @param [in] 	-	[1] Name: GPIOx
* 						Type: GPIO_Typedef_t*
* 						where x can be (A..E depending on device) to select GPIO Port
* 						*** This Value must be set according to the values @ref GPIO ***
* 					[2] Name: pin_number
* 						Type: uint8_t
* 						where pin_number can be (0..15 depending on device) to select specific pin
* 					[3] Name: value
* 						Type: uint8_t
* 						*** This Value must be set according to the values @ref GPIO_PIN_state ***
*
* @param [out] 	- None
* @retval 		- None
* Note			- None
*/
void MCAL_GPIO_WritePin(GPIO_Typedef_t* GPIOx, uint8_t piny, uint8_t value){
	if(value == GPIO_PIN_SET){
		SET_BIT(GPIOx->ODR, piny->GPIO_pin_number);
	}else{
		CLEAR_BIT(GPIOx->ODR, piny->GPIO_pin_number);
	}
}

/**================================================================
* @Fn			- MCAL_GPIO_WritePort
* @brief 		- Writing Value to GPIO Port x
* @param [in] 	-	[1] Name: GPIOx
* 						Type: GPIO_Typedef_t*
* 						where x can be (A..E depending on device) to select GPIO Port
* 						*** This Value must be set according to the values @ref GPIO ***
* 					[2] Name: value
* 						Type: uint16_t
* 						Description: The 16-bit value to be written on the port
*
* @param [out] 	- None
* @retval 		- None
* Note			- None
*/
void MCAL_GPIO_WritePort(GPIO_Typedef_t* GPIOx, uint16_t value){
	GPIOx->ODR = (uint32_t)(value);
}

/**================================================================
* @Fn			- MCAL_GPIO_TogglePin
* @brief 		- Toggle Value of Pin y in GPIO Port x
* @param [in] 	-	[1] Name: GPIOx
* 						Type: GPIO_Typedef_t*
* 						where x can be (A..E depending on device) to select GPIO Port
* 						*** This Value must be set according to the values @ref GPIO ***
* 					[2] Name: piny
* 						Type: GPIO_pin_config_t*
* 						where y can be (0..15 depending on device) to select specific pin
* 						*** This Value must be set according to the values @ref GPIO_PIN_define ***
* @param [out] 	- None
* @retval 		- None
* Note			- None
*/
void MCAL_GPIO_TogglePin(GPIO_Typedef_t* GPIOx, GPIO_pin_config_t* piny){
	TOGGLE_BIT(GPIOx->ODR, piny->GPIO_pin_number);
}

/**================================================================
* @Fn			- MCAL_GPIO_LockPin
* @brief 		- Toggle Value of Pin y in GPIO Port x
* @param [in] 	-	[1] Name: GPIOx
* 						Type: GPIO_Typedef_t*
* 						where x can be (A..E depending on device) to select GPIO Port
* 						*** This Value must be set according to the values @ref GPIO ***
* 					[2] Name: piny
* 						Type: GPIO_pin_config_t*
* 						where y can be (0..15 depending on device) to select specific pin
* 						*** This Value must be set according to the values @ref GPIO_PIN_define ***
* @param [out] 	- None
* @retval 		- None
* Note			- None
*/
void MCAL_GPIO_LockPin(GPIO_Typedef_t* GPIOx, GPIO_pin_config_t* piny){
//	Write 1
//	Write 0
//	Write 1
//	Read 0
//	Read 1 (this read is optional but confirms that the lock is active)
}
